{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [{"tool": {"driver": {"name": "Betterscan", "informationUri": "https://betterscan.io", "semanticVersion": "0.9.9", "rules": [{"id": "0", "name": "BetterscanRule", "shortDescription": {"text": "RSAprivatekey"}, "fullDescription": {"text": "RSAprivatekey"}, "helpUri": "https://betterscan.io", "help": {"markdown": "RSAprivatekey", "text": ""}, "defaultConfiguration": {"level": "warning"}, "properties": {"tags": ["security"]}}, {"id": "1", "name": "BetterscanRule", "shortDescription": {"text": "GenericAPIKey"}, "fullDescription": {"text": "GenericAPIKey"}, "helpUri": "https://betterscan.io", "help": {"markdown": "GenericAPIKey", "text": ""}, "defaultConfiguration": {"level": "warning"}, "properties": {"tags": ["security"]}}, {"id": "2", "name": "BetterscanRule", "shortDescription": {"text": "Highentropy"}, "fullDescription": {"text": "Highentropy"}, "helpUri": "https://betterscan.io", "help": {"markdown": "Highentropy", "text": ""}, "defaultConfiguration": {"level": "warning"}, "properties": {"tags": ["security"]}}, {"id": "3", "name": "BetterscanRule", "shortDescription": {"text": "Session middleware settings: `maxAge` not set. Use it to set expiration date for cookies."}, "fullDescription": {"text": "Session middleware settings: `maxAge` not set. Use it to set expiration date for cookies."}, "helpUri": "https://betterscan.io", "help": {"markdown": "Session middleware settings: `maxAge` not set. Use it to set expiration date for cookies.", "text": ""}, "defaultConfiguration": {"level": "warning"}, "properties": {"tags": ["security"]}}, {"id": "4", "name": "BetterscanRule", "shortDescription": {"text": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."}, "fullDescription": {"text": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."}, "helpUri": "https://betterscan.io", "help": {"markdown": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.", "text": ""}, "defaultConfiguration": {"level": "warning"}, "properties": {"tags": ["security"]}}, {"id": "5", "name": "BetterscanRule", "shortDescription": {"text": "Untrusted user input in redirect() can result in Open Redirect vulnerability."}, "fullDescription": {"text": "Untrusted user input in redirect() can result in Open Redirect vulnerability."}, "helpUri": "https://betterscan.io", "help": {"markdown": "Untrusted user input in redirect() can result in Open Redirect vulnerability.", "text": ""}, "defaultConfiguration": {"level": "warning"}, "properties": {"tags": ["security"]}}, {"id": "6", "name": "BetterscanRule", "shortDescription": {"text": "String comparisons using '===', '!==', '!=' and '==' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/"}, "fullDescription": {"text": "String comparisons using '===', '!==', '!=' and '==' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/"}, "helpUri": "https://betterscan.io", "help": {"markdown": "String comparisons using '===', '!==', '!=' and '==' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/", "text": ""}, "defaultConfiguration": {"level": "warning"}, "properties": {"tags": ["security"]}}, {"id": "7", "name": "BetterscanRule", "shortDescription": {"text": "A hardcoded password in plain text is identified. Store it properly in an environment variable."}, "fullDescription": {"text": "A hardcoded password in plain text is identified. Store it properly in an environment variable."}, "helpUri": "https://betterscan.io", "help": {"markdown": "A hardcoded password in plain text is identified. Store it properly in an environment variable.", "text": ""}, "defaultConfiguration": {"level": "warning"}, "properties": {"tags": ["security"]}}, {"id": "8", "name": "BetterscanRule", "shortDescription": {"text": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection"}, "fullDescription": {"text": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection"}, "helpUri": "https://betterscan.io", "help": {"markdown": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection", "text": ""}, "defaultConfiguration": {"level": "warning"}, "properties": {"tags": ["security"]}}, {"id": "9", "name": "BetterscanRule", "shortDescription": {"text": "A hardcoded username in plain text is identified. Store it properly in an environment variable."}, "fullDescription": {"text": "A hardcoded username in plain text is identified. Store it properly in an environment variable."}, "helpUri": "https://betterscan.io", "help": {"markdown": "A hardcoded username in plain text is identified. Store it properly in an environment variable.", "text": ""}, "defaultConfiguration": {"level": "warning"}, "properties": {"tags": ["security"]}}, {"id": "10", "name": "BetterscanRule", "shortDescription": {"text": "A variable is present in the filename argument of fs calls, this might allow an attacker to access anything on your system.\n"}, "fullDescription": {"text": "A variable is present in the filename argument of fs calls, this might allow an attacker to access anything on your system.\n"}, "helpUri": "https://betterscan.io", "help": {"markdown": "A variable is present in the filename argument of fs calls, this might allow an attacker to access anything on your system.\n", "text": ""}, "defaultConfiguration": {"level": "warning"}, "properties": {"tags": ["security"]}}, {"id": "11", "name": "BetterscanRule", "shortDescription": {"text": "Detected eval(variable), which could allow a malicious actor to run arbitrary code.\n"}, "fullDescription": {"text": "Detected eval(variable), which could allow a malicious actor to run arbitrary code.\n"}, "helpUri": "https://betterscan.io", "help": {"markdown": "Detected eval(variable), which could allow a malicious actor to run arbitrary code.\n", "text": ""}, "defaultConfiguration": {"level": "warning"}, "properties": {"tags": ["security"]}}, {"id": "12", "name": "BetterscanRule", "shortDescription": {"text": "Detected the use of require(variable). Calling require with a non-literal argument might\nallow an attacker to load an run arbitrary code, or access arbitrary files.\n"}, "fullDescription": {"text": "Detected the use of require(variable). Calling require with a non-literal argument might\nallow an attacker to load an run arbitrary code, or access arbitrary files.\n"}, "helpUri": "https://betterscan.io", "help": {"markdown": "Detected the use of require(variable). Calling require with a non-literal argument might\nallow an attacker to load an run arbitrary code, or access arbitrary files.\n", "text": ""}, "defaultConfiguration": {"level": "warning"}, "properties": {"tags": ["security"]}}, {"id": "13", "name": "BetterscanRule", "shortDescription": {"text": "Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype, leading to possible code execution."}, "fullDescription": {"text": "Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype, leading to possible code execution."}, "helpUri": "https://betterscan.io", "help": {"markdown": "Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype, leading to possible code execution.", "text": ""}, "defaultConfiguration": {"level": "warning"}, "properties": {"tags": ["security"]}}, {"id": "14", "name": "BetterscanRule", "shortDescription": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "fullDescription": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "helpUri": "https://betterscan.io", "help": {"markdown": "Ensure that HEALTHCHECK instructions have been added to container images", "text": ""}, "defaultConfiguration": {"level": "warning"}, "properties": {"tags": ["security"]}}, {"id": "15", "name": "BetterscanRule", "shortDescription": {"text": "Private Key"}, "fullDescription": {"text": "Private Key"}, "helpUri": "https://betterscan.io", "help": {"markdown": "Private Key", "text": ""}, "defaultConfiguration": {"level": "warning"}, "properties": {"tags": ["security"]}}]}}, "results": [{"ruleId": "0", "message": {"text": "RSAprivatekey"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "artifacts/cert/server.key"}, "region": {"startLine": 15}}}]}, {"ruleId": "1", "message": {"text": "GenericAPIKey"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "app/views/tutorial/a2.html"}, "region": {"startLine": 310}}}]}, {"ruleId": "2", "message": {"text": "Highentropy"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "artifacts/cert/server.crt"}, "region": {"startLine": 13}}}]}, {"ruleId": "3", "message": {"text": "Session middleware settings: `maxAge` not set. Use it to set expiration date for cookies."}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "server.js"}, "region": {"startLine": 78}}}]}, {"ruleId": "4", "message": {"text": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "app/assets/vendor/chart/raphael-min.js"}, "region": {"startLine": 10}}}]}, {"ruleId": "5", "message": {"text": "Untrusted user input in redirect() can result in Open Redirect vulnerability."}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "app/routes/index.js"}, "region": {"startLine": 74}}}]}, {"ruleId": "6", "message": {"text": "String comparisons using '===', '!==', '!=' and '==' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "app/routes/session.js"}, "region": {"startLine": 170}}}]}, {"ruleId": "7", "message": {"text": "A hardcoded password in plain text is identified. Store it properly in an environment variable."}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "app/routes/session.js"}, "region": {"startLine": 59}}}]}, {"ruleId": "8", "message": {"text": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "app/assets/vendor/jquery.min.js"}, "region": {"startLine": 4}}}]}, {"ruleId": "9", "message": {"text": "A hardcoded username in plain text is identified. Store it properly in an environment variable."}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "app/routes/session.js"}, "region": {"startLine": 58}}}]}, {"ruleId": "10", "message": {"text": "A variable is present in the filename argument of fs calls, this might allow an attacker to access anything on your system.\n"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "app/assets/vendor/jquery.min.js"}, "region": {"startLine": 6}}}]}, {"ruleId": "11", "message": {"text": "Detected eval(variable), which could allow a malicious actor to run arbitrary code.\n"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "app/routes/contributions.js"}, "region": {"startLine": 32}}}]}, {"ruleId": "12", "message": {"text": "Detected the use of require(variable). Calling require with a non-literal argument might\nallow an attacker to load an run arbitrary code, or access arbitrary files.\n"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "config/config.js"}, "region": {"startLine": 7}}}]}, {"ruleId": "13", "message": {"text": "Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype, leading to possible code execution."}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "app/assets/vendor/bootstrap/bootstrap-tour.js"}, "region": {"startLine": 79}}}]}, {"ruleId": "14", "message": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "Dockerfile"}, "region": {"startLine": 1}}}]}, {"ruleId": "15", "message": {"text": "Private Key"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "artifacts/cert/server.key"}, "region": {"startLine": 1}}}]}]}]}